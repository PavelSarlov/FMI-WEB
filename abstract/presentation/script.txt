Както се вижда, ще ви говоря малко за шаблоните за поведение, чиято роля се основава на комуникацията между обектите на класовете и разпределянето на работата между тях. Ако се чудите защо (в php) е зачертано, в презентация ще мина само през самата идея на отделните шаблони, заради времевото ограничение, та ако ви е интересно знаете - прочитате реферата или ресурсите предоставени в него.

Ще се опитам да speedrun-на 10 шаблона, дано не се окаже пълна трагедия.

1. Идеята на Верига отговорности е да се избегне coupling-а между подател на заявка и нейния получател. Това става чрез изграждането на верига от получатели, по която заявката да мине постепенно, и всеки от получателите да реши дали да я обработи или не. Единствен проблем на шаблона е, че може да се появят висящи заявки, та разработчиците трябва да решат как да се справят с тях.

2. Командата капсулира заявка в един обект, който да съдържа данните за нея. Тази трансформация ни позволява да подаваме заявката като аргумент към методи, да отлагаме изпълнението ѝ или да я наредим на опашка. Също така поддържа и операции за отмяна. Лошото е, че кодът може да стане доста усложнен в последствие.

3. Итератор предполагам всички са срещали. Той предоставя начин за последователен достъп до елементите на някаква колекция без да излага на показ вътрешното му представяне. Освен ако не работите с някакви специални колекции, сигурно няма да ви се налага да го имплементирате често.

4. Посредник е шаблон, който има за цел да намали хаотичните зависимости между обектите. Шаблонът лимитира директната комуникация между обектите и ги кара да си сътрудничат единствено и само чрез обект посредник. За пример от реалния свят може да видите на самата картинка с регулировчика на движението.

5. Идеята на споменът е да се обособи по някакъв начин състоянието на даден обект, без да се нарушава капсулацията на данните му, и чрез този "спомен" или моментна снимка да може да се възстанови неговото състояние на по-късен етап.

6. Наблюдателят позволява да се дефинира някакъв механизъм за абониране, чрез който множество обекти да бъдат известявани за случващи се събития, които ги интересуват. Тези от вас, които се занимават с front-end, сигурно доста често използват шаблона, дори несъзнателно. Един проблем, който може да се срещне при шаблона е, че абонатите се известяват в произволен ред.

7. Идеята да състоянието е да се позволи на обект да изменя поведението си спрямо неговото вътрешно състояние. За аналогия може да си представите бутоните или суичовете на смартфоните си - държат се различно при отключен или заключен телефон, продължително задържане, ниска батерия и т.н. Използването на шаблона може да се окаже overkill, ако състоянията ви са малко на брой или рядко се сменят.

8. Стратегията ви дава възможността да дефинирате група от алгоритми, всеки един независим от другите, които да бъдат взаимнозаменяеми. Примерно да речем, че трябва да стигнете от точка А до точка Б. За целта може да използвате градски транспорт, такси или ваш собствен транспорт. Това са вашите стратегии и можете да изберете една спрямо фактори като бюджет или времеви ограничения.

9. Шаблонният метод дефинира скелет на алгоритъм в един базов клас като отделни стъпки, но позволява на подкласовете му да предефинират специфични стъпки от алгоритъма без да изменят структурата му. Шаблонът може да срещне проблеми при по-сложнни алгоритми, а и предоставения на потребителя скелет, с който да работи, може да се окаже недостатъчен.

10. Последно, но не на последно място, имаме посетител. Често колекциите съдържат обекти, които са от различни типове. При такива случаи дадени операции трябва да се извършат върху всеки елемент от колекцията без да се знае неговия тип. Това е и идеята на посетителя, в него се обособяват операциите за отделните видове елементи като така клиентът има нужда да знае само за посетителя.
